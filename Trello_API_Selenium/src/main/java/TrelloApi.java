import retrofit2.Call;
import retrofit2.http.*;

public interface TrelloApi {
    // В інтерфесі описані всі необхідні HTTP запити

    // 1) Вказати імя та тип методу за допомогою анотацій
    // Анотація - це помітка, за допомогою якої програміст вказує компілятору Java і засобам розробки, що робити з кусками коду, окрім виконання програми
    // Анотувати можна змінні, параметри, класи, пакети.
    // Анотація @Override, означає, що збираємось перевизначити метод батьківського класу.
    // Однако Аннотации могут нести в себе не только смысл "для надежности": в них можно хранить какие-то данные, которые после будут использоваться.
    // Також часто анотації використовуються в різних бібліотеках (наприклад, в Retrofit). І розставляючи по шаблонам з документації анотації в своїх класах, говоримо бібліотеці які методи та класи потрібно брати для взаємодії.

    // 2) Додати необхідні параметри

    // 3) Задати відносний url. Він комбінується з базовою адресою сайта (baseUrl()) та отримуємо повний шлях до сторінки

    // 4) Задати тип значення, яке буде повертатись, Call<T> з потрібним типом

    // Create a new board
    // The new name for the board. 1 to 16384 characters long.
    // @POST - Анотація
    // "1/boards/" - відносний url, тобто url ендпоінту на який будемо відправляти. В цьому випадку базовий url записаний в RetrofitBuilder (АПІ Білдері). Можна також записати повний url.
    @POST("1/boards/")
    // В <> зазначається тип значения, яке повертатиметься. В нашому випадку - це модель Board, яку очікуємо отримати у відповідь
    // createBoard - назва методу для створення дошки
    // В () зазначено які параметри та в якому виді потрібні
    // POST метод для створення дошки в Trello вимагає, щоб передавали параметри типу @Body - параметри передаємо в тілі запиту
    // В данному випадку в тілі передаємо модель Board, так як вона містить всі необхідні параметри, які потрібні для відпрвки ендпоінта - токен, ключ та назву
    // Побудова REST архітектури передбачає, щоб будь-які параметри POST завжди передаємо в BODY
    // Зараз в BODY є параметр name, але запишемо його окремо за допомогою анотації @Query
    // @Query параметр, який задається через знак ?
    Call<Board> createBoard(@Body Board board, @Query("name") String name);

    // Create a new List on a Board
    // Метод POST, який відправляємо на відносний url "/1/boards/{id}/lists", передаємо обовязковий параметр id у вигляді @PATH - це те що передаємо в рядку не як параметр через знак ?, а замість {id} підставляємо idBoard
    // Без ключа і токена неможемо відправляти запит. Тому потрібно @Body - параметри передаємо в тілі запиту
    @POST("/1/boards/{id}/lists")
    Call<List> createList(@Body List list, @Path("id") String idBoard, @Query("name") String name);

    // Create a new Card on a List
    // Метод POST, який відправляємо на відносний url "/1/cards", передаємо обовязковий параметр idList у вигляді @Query
    // Без ключа і токена неможемо відправляти запит. Тому потрібно @Body - параметри передаємо в тілі запиту
    @POST("/1/cards")
    Call<Card> createCard(@Body Card card, @Query("idList") String idList, @Query("name") String name);

    // Create a new Checklist on a Card
    // Метод POST, який відправляємо на відносний url "/1/checklists", передаємо обовязковий параметр idCard у вигляді @Query
    // Без ключа і токена неможемо відправляти запит. Тому потрібно @Body - параметри передаємо в тілі запиту
    @POST("/1/checklists")
    Call<Checklist> createChecklist(@Body Checklist checklist, @Query("idCard") String idCard, @Query("name") String name);

    // Delete a board.
    // Метод DELETE, який відправляємо на відносний url "/1/boards/{id}", передаємо обовязковий параметр id у вигляді @PATH - це те що передаємо в рядку не як параметр через знак ?, а замість {id} підставляємо id
    // Без ключа і токена неможемо відправляти запит. Тому потрібно @Body - параметри передаємо в тілі запиту

    @DELETE("/1/boards/{id}")
    Call <Board> deleteBoard(@Path("id") String id, @Query("key") String key, @Query("token") String token);

}
