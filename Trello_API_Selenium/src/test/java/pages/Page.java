package pages;

import org.openqa.selenium.WebDriver;

// Абстракція — це принцип ООП, згідно якому при проектуванні класів та створення обєктів необхідно виділяти тільки головні сутності, та відкидати другорядні.
// Абстрактний клас — це максимально абстрактна, дуже приблизна "заготовка" для групи майбутніх класів. Цю заготовку неможна використовувати в готовому вигляді — дуже "сира". Але вона описує деякий загальний стан та поведінку, якою будуть володіти майбутні класи-наслідники абстрактного класу.
// Абстрактний клас схожий на звичайний клас. В абстрактному класі також можна визначити поля та методи, в той же час неможна створити обєкт чи екземпляр абстрактного класу. Абстрактні класи потрібні для надання базового функціоналу для класів-потомків. А похідні класи вже реалізують цей функціонал.
// Екземпляр абстрактного класу створити неможна
// Клас являється абстрактним, якщо хоча б один з його методів являється абстрактним
// Якщо метод помічений словом abstract, кожен клас-потомок повинен його реалізувати або бути оголешеним як абстрактний. Інакше компілятор видасть помилку
// Інтерфейс описує тільки поведінку, у нього немає стану. А у абстрактному класі все є
// Абстрактний клас звязує між собою та обєднує класи, які мають дуже близький звязок. В той же час, один і той самий інтерфейс можуть реалізувати класи, у яких взагалі немає нічого спільного
// Класи можуть реалізувати багато інтерфейсів, але наслідуватись можна тільки від одного класу.
public abstract class Page {
    // Для того щоб було видно driver, то могли б зробити extends TestManger - це відкинули
    // Але напишемо конструктор
    // Модифікатори доступа - це частіше всього ключові слова, які регулюють рівень доступності до різних частин коду.
    // Поля та методи, які позначені модифікатором доступа protected, будуть видні: в межах усіх класів, які знаходяться в тому ж пакеті, що і поточний клас, або в межах всіх класів-наслідників поточного класу.
    protected WebDriver driver;
    // створення конструктора
    public Page(WebDriver driver){
        this.driver = driver;
    }

    // реалізація методу для переходу на сторінку по url
    // так як будемо викликати цей метод з класу HomePage, то робимо public (якщо protected, то потрібно додатково його перевизначати)
    public void openPage(String url){
        driver.get(url);
    };

    // реалізація методу для отримання title відкритої сторінки
    // так як будемо викликати цей метод з класу HomePage, то робимо public (якщо protected, то потрібно додатково його перевизначати)
    public String getTitle(){
        return driver.getTitle();
    };
}
